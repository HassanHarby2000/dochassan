Most of you have heard of JPEG
and MPEG, which are standards for representing images, video, and audio. Data compression
algorithms are used in these standards to reduce the number of bits required to represent
an image or a video sequence or music. In brief, data compression is the art or science of
representing information in a compact form. We create these compact representations by
identifying and using structures that exist in the data. Data can be characters in a text file,
numbers that are samples of speech or image waveforms, or sequences of numbers that are
generated by other processes. The reason we need data compression is that more and more of the information that we generate and use is in digital form—consisting of numbers represented
by bytes of data. And the number of bytes required to represent multimedia data can be
huge.

Data compression is the process of modifying, encoding or converting the bits structure of data in such a way that it consumes less space on disk.

It enables reducing the storage size of one or more data instances or elements. Data compression is also known as source coding or bit-rate reduction.

data compression is a reduction in the number of bits needed to represent data. Compressing data can save storage capacity, speed up file transfer, and decrease costs for storage hardware.

Data compression can reduce a text file to 50% or a significantly higher percentage of its original size.

Reasons for data compression (less storage – transmitting faster, decreasing access time – processing faster sequentia).

Techniques:
1- Using compact notation 
2-Using Run Length indicator
3- Using Variable length coding >> Huffman Code

• To compress data by Huffman code 
First  . You must know  the frequency of each character 
Second . You build Huffman tree
you choose the fewest two frequency and make them as children and the new Parent has frequency (sum of children frequencies)
and repeat that until  you complete the tree
Then   , You make mapping  to character  using the tree 
each leaf node is a character. more the frequency of the character is high more it is near of the root.
and compute the levels from the root to each leaf node.if go left add 0 if go right add 1.
Finally, you repacle  all characters by new codes

• Huffman coding goal
more frequently occurring values are given shorter search paths in tree
